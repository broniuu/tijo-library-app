@using LibraryApp.Web.Pages.Authors
@using LibraryApp.Web.Pages.Tags
@using LibraryApp.Shared.Dtos
@using LibraryApp.Shared
@inject AuthorsService AuthorsService
@inject TagsService TagsService

<div class="border p-3 mb-5">
    <div class="row">
        <div class="col-auto">
            <div class="row g-3 align-items-center">
                <div class="col-auto">
                    <label for="inputBookName" class="col-form-label fs-4">Book:</label>
                </div>
                <div class="col-auto">
                    <input id="inputBookName" type="text" class="form-control" placeholder="Books name" aria-label="Books name" @bind="_filter.KeyWord">
                </div>
            </div>
        </div>
        <div class="col-auto">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="_filter.ShowBorrowed">
                <label class="form-check-label">
                    Show borrowed
                </label>
            </div>
            <div class="input-group mb-3">
                <label class="input-group-text">Hardcover</label>
                <select class="form-select" @bind="_filter.HardcoverRequirement">
                    <option selected="" value="@HardcoverRequirement.Has">Have</option>
                    <option value="@HardcoverRequirement.DontHave">Don't have</option>
                    <option value="@HardcoverRequirement.Indifferent">Indifferent</option>
                </select>
            </div>
        </div>
        <div class="col">
            <button class="btn btn-secondary fs-4 w-100 mb-2" @onclick="() => _showAuthors = !_showAuthors">Authors</button>
            @if (_showAuthors)
            {
                <div class="d-flex flex-row flex-wrap gap-1 card card-body">
                    @foreach (var author in _authorsToChoose.OrEmptyIfNull())
                    {
                        <div class="alert alert-secondary p-1 m-md-1">
                            <div class="form-check align-middle">
                                <input class="form-check-input align-middle" type="checkbox" @bind="author.IsSelected">
                                <label class="form-check-label align-middle">
                                    @author.GetNameAndSurname
                                </label>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
        <div class="col">
            <button class="btn btn-secondary fs-4 w-100 mb-2" @onclick="() => _showTags = !_showTags">Tags</button>
            @if (_showTags)
            {
                <div class="d-flex flex-row flex-wrap gap-1 card card-body">
                    @foreach (var tag in _tagsToChoose.OrEmptyIfNull())
                    {
                        <div class="alert alert-primary p-1 m-md-1">
                            <div class="form-check align-middle">
                                <input class="form-check-input align-middle" type="checkbox" @bind="tag.IsSelected">
                                <label class="form-check-label align-middle">
                                    @tag.Title
                                </label>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-primary" @onclick="Search">Search</button>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<FilterBooksQuery> OnSearch { get; set; }

    FilterBooksQuery _filter = new() {HardcoverRequirement = HardcoverRequirement.Has};
    List<SelectableAuthor> _authorsToChoose = new();
    List<SelectableTag> _tagsToChoose = new();
    bool _showAuthors;
    bool _showTags;

    protected override async Task OnInitializedAsync()
    {
        _authorsToChoose = await AuthorsService.Get() ?? new();
        _tagsToChoose = await TagsService.Get() ?? new();
    }

    Task Search()
    {
        _filter.AuthorIds = _authorsToChoose.Where(a => a.IsSelected).Select(a => a.AuthorId).ToList();
        _filter.TagIds = _tagsToChoose.Where(t => t.IsSelected).Select(t => t.TagId).ToList();
        return OnSearch.InvokeAsync(_filter);
    }

}